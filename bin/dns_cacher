#!/bin/env ruby
# frozen_string_literal: true
require 'dns_cacher'
require 'async'
require 'logger'
require 'syslog/logger'

if ARGV.include? "-h" or ARGV.include? "--help"
  puts "Usage: dns_cache [options]\n" +
    "  -D, --daemon     Start in daemon mode\n" +
    "      --debug      Enable verbose debug logging\n" +
    "      --pidfile=   Set PID file location (daemon mode only)\n" +
    "  -u, --user       Switch to 'nobody' after setup\n"
    #"  -u, --user=      User to switch to after setup (only when started as root)\n" +
    #"  -g, --group=     Group to switch to after setup (only when started as root)\n"
  exit! 0
end

DAEMON = ARGV.include?("-D") or ARGV.include?("--daemon")
DEBUG = ARGV.include?("--debug")
ROOT = (Process.uid == 0)
DROP_PRIV = ARGV.include?("-u") or ARGV.include?("--user")

# if called as a daemon immediately fork to background
# TODO: find a better way of logging, this is a mess
if DAEMON
  $logger = Syslog::Logger.new "dns_cacher", Syslog::LOG_DAEMON
  $logger.level = DEBUG ? Syslog::LOG_DEBUG : Syslog::LOG_INFO
  
  begin
    $pidfile = File.open("/run/dns_cacher.pid")
    $pidfile.write Process.pid
  rescue Errno::ENOENT
    $logger.error "Failed to write PID file: /run/dns_cacher.pid"
    $pidfile = nil
  end

  Process.daemon unless DEBUG
else
  $logger = Logger.new STDOUT
  $logger.level = DEBUG ? Logger::DEBUG : Logger::INFO
end

unless ROOT
  $logger.warn "Not running as root, unable to bind local ports < 1000"
end

# default endpoints, should be overwritten by config
$DEFAULT_ENDPOINTS = [
  Addrinfo.udp("127.0.0.1", ROOT ? 53 : 1053),
  Addrinfo.udp("::1", ROOT ? 53 : 1053),
]

# Allow code from this point runs within an async reactor
Sync do |task|
  Signal.trap "INT" do
    task.reactor.interrupt
  end

  # Setup and run a BasicServer (name is a bit inaccurate, it does quite a bit)
  server = DNSCacher::BasicServer.new($DEFAULT_ENDPOINTS, DEBUG, $logger)


  # If running as root, drop privileges after setup
  # to avoid unnecessary security risk
  if DAEMON and ROOT and DROP_PRIV
    $logger.info "Dropping root privileges"
    new_uid = Process::UID.from_name("nobody")
    Process::UID.change_privilege(new_uid)
  end

  # run the server and await the main fiber
  $logger.info "Server setup complete"
  server.run.wait
ensure
  $logger.info "Server shut down"
end

if DAEMON and $pidfile
  begin
    File.delete($pidfile)
  rescue Errno::ENOENT
  end
end
